package com.may.temp;import java.lang.reflect.Method;import com.may.proxy.MyHandler;public class $proxy implements com.may.service.UserService {	private MyHandler handler;	public $proxy(MyHandler handler) {		this.handler = handler;	}	@Override	public int update() {		int returnValue = 0;		Method[] methods = com.may.service.UserService.class.getDeclaredMethods();		Method m = null;		for (Method method : methods) {			if (method.toString().equals("public abstract int com.may.service.UserService.update()")) {				m = method;			}		}		try {			returnValue = (int) this.handler.invoke(this, m, new Object[] {});		} catch (Throwable e) {			e.printStackTrace();		}		return returnValue;	}	@Override	public void insert() {		Method[] methods = com.may.service.UserService.class.getDeclaredMethods();		Method m = null;		for (Method method : methods) {			if (method.toString().equals("public abstract void com.may.service.UserService.insert()")) {				m = method;			}		}		try {			this.handler.invoke(this, m, new Object[] {});		} catch (Throwable e) {			e.printStackTrace();		}	}}